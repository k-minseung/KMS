--사원테이블에서 직종,평균급여를 출력하되
--평균급여가 bruce 보다 큰 경우만 조회
SELECT JOB_ID,AVG(SALARY) FROM EMPLOYEES 
GROUP BY JOB_ID 
HAVING AVG(SALARY) > (SELECT AVG(SALARY) FROM EMPLOYEES WHERE FIRST_NAME ='Bruce');

--사원테이블에서 성에 bat을 포함하는 사원과 같은 부서에서 근무하는 사원들의
--부서번호 이름을 출력
SELECT DEPARTMENT_ID,FIRST_NAME FROM EMPLOYEES
WHERE DEPARTMENT_ID =(SELECT DEPARTMENT_ID FROM EMPLOYEES WHERE LAST_NAME LIKE '%Bat%');

--사원테이블에서 100번 부서의 최소 급여보다 많이 받는
--다른 부서의 부서번호 최소급여를 조회하세요
SELECT DEPARTMENT_ID,MIN(SALARY) FROM EMPLOYEES
GROUP BY DEPARTMENT_ID
HAVING MIN(SALARY)> (SELECT MIN(SALARY)FROM EMPLOYEES WHERE DEPARTMENT_ID=100);

SELECT * FROM PLAYER;
     
--PLAYER 에서 TEAM_ID가 K01인 선수 중 POSITION 이 GK인선수
SELECT * FROM (SELECT * FROM PLAYER WHERE TEAM_ID = 'K01')
WHERE "POSITION" ='GK';

--PLAYER테이블에서 전체평균키와 포지션별 평균키 구하기
SELECT "POSITION",AVG(HEIGHT),(SELECT ROUND(AVG(HEIGHT),1)FROM PLAYER) FROM PLAYER p
WHERE "POSITION" IS NOT NULL
GROUP BY "POSITION";

-- AUTO COMMIT
-- 내가 실행하는 쿼리문이 테이블에 바로 반영
-- COMMIT이 되면 되돌아가는 것이 불가능하다.

-- PLAYER 테이블에서 NICKNAME이 NULL인 선수들은
--정태민선수의 닉네임으로 변경하기

UPDATE PLAYER SET 
NICKNAME = (SELECT NICKNAME FROM PLAYER WHERE PLAYER_NAME='정태민')
WHERE NICKNAME IS NULL;

SELECT NICKNAME FROM PLAYER p;

--사원테이블에서 평균급여보다 낮은 사원들의 급여를 10%인상
--AVG(SALARY)-> 6461
UPDATE EMPLOYEES SET 
SALARY = SALARY *1.1
WHERE SALARY <(SELECT AVG(SALARY) FROM EMPLOYEES); 

SELECT AVG(SALARY) FROM EMPLOYEES e ;

SELECT AVG(HEIGHT) FROM PLAYER p ;
--평균키보다 큰 선수들을 삭제
DELETE FROM PLAYER WHERE HEIGHT > (SELECT AVG(HEIGHT)FROM PLAYER p);
SELECT * FROM PLAYER p ;

--FROM 절에서 쓸 때 : IN LINE VIEW
--SELECT 절에서 사용할 때 : SCALAR
--WHERE 절에서 사용할 때 : SUB QUERY

--사원테이블에서 성과 이름 연결하기
SELECT FIRST_NAME||' '||LAST_NAME FROM EMPLOYEES e 

--XX의 급여는 XX이다.
SELECT FIRST_NAME||'의 급여는 '||SALARY||'이다' FROM EMPLOYEES e 

SELECT  COUNT(SALARY) AS 개수, 
		MAX(SALARY)   AS 최대값,
		MIN(SALARY)   AS 최소값,
		SUM(SALARY)   AS 합계,
		AVG(SALARY)   AS 평균
FROM EMPLOYEES e 

--사원테이블에서 EMPLOTEE_ID를 사번 NAME을 이름
--SALARY를 급여로 별칭을주고 전체내용조회
SELECT  EMPLOYEE_ID AS 사번,
		FIRST_NAME  AS 이름,
		SALARY      AS 급여
FROM EMPLOYEES e;

--두개 이상의 테이블에서 컬럼을 조회할 때
--어떤 테이블에서 온 컬럼인지 확실하게 적어줘야한다.
SELECT E.DEPARTMENT_ID, d.DEPARTMENT_ID
FROM EMPLOYEES e ,DEPARTMENTS d ;

--사원테이블에는 부서명이 없다.
--부서테이블에는 DEPARTMENT_ID 컬럼을 PK로 가지고 있다.
--사원테이블에는 DEPARTMENT_ID 컬럼을 FK로 가지고 있다.

SELECT E.FIRST_NAME,E.DEPARTMENT_ID,D.DEPARTMENT_NAME
FROM EMPLOYEES e JOIN DEPARTMENTS d 
ON E.DEPARTMENT_ID =D.DEPARTMENT_ID ;

--부서테이블,LOCATION지역테이블로부터 부서명과 도시명을 조회
SELECT D.DEPARTMENT_NAME,L.CITY
FROM LOCATIONS l JOIN DEPARTMENTS d 
ON L.LOCATION_ID = D.LOCATION_ID ;

--지역테이블과, 나라테이블(COUNTRIES)를 조회하여 
--도시명과 국가명(COUNTRY_NAME)을 조회
SELECT L.CITY , C.COUNTRY_NAME 
FROM LOCATIONS l JOIN COUNTRIES c 
ON L.COUNTRY_ID =C.COUNTRY_ID ;

--이름 성 직종 직업명을 조회
--EMPLOYEES,JOBS테이블
SELECT FIRST_NAME,LAST_NAME,E.JOB_ID,J.JOB_TITLE
FROM EMPLOYEES e JOIN JOBS j 
ON E.JOB_ID =J.JOB_ID ;

-- 테이블 3개 조인하기
-- 사원 부서 지역테이블로부터 이름 이메일 부서번호 부서명 지역번호 도시명
SELECT E.FIRST_NAME,
E.EMAIL,
E.DEPARTMENT_ID,
D.DEPARTMENT_NAME,
L.LOCATION_ID,L.CITY
FROM EMPLOYEES e JOIN DEPARTMENTS d 
ON E.DEPARTMENT_ID =D.DEPARTMENT_ID 
JOIN LOCATIONS l
ON D.LOCATION_ID =L.LOCATION_ID AND L.CITY ='Seattle';

SELECT  * FROM EMP;
SELECT E2.ENAME 직원, E.ENAME 상사, E.ENAME 상사 ,E.EMPNO
FROM EMP e JOIN EMP e2 
ON E.EMPNO =E2.MGR;

CREATE  TABLE 테이블A(
A_ID NUMBER,
A_NAME VARCHAR2(10)
);

CREATE  TABLE 테이블B(
A_ID NUMBER,
A_NAME VARCHAR2(10)
);

INSERT ALL
INTO 테이블A VALUES(1,'JHON')
INTO 테이블A VALUES(2,'JENA')
INTO 테이블A VALUES(3,'BOB')
INTO 테이블B VALUES(101,'APPLE')
INTO 테이블B VALUES(102,'BANANA')
SELECT * FROM DUAL;

SELECT * FROM 테이블A;
SELECT * FROM 테이블B;

SELECT * FROM 테이블A CROSS JOIN 테이블B;

































































































